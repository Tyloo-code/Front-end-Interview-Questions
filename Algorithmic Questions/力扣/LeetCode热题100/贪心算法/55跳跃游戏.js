// 给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
// 数组中的每个元素代表你在该位置可以跳跃的最大长度。
// 判断你是否能够到达最后一个下标。
// 贪心算法 x+nums[x]  更新最远可以到达的位置

// 时间复杂度：O(n)，其中 n 为数组的大小。只需要访问 nums 数组一遍，共 n 个位置。
// 空间复杂度：O(1)，不需要额外的空间开销。

// 如果某一个作为 起跳点 的格子可以跳跃的距离是 3，那么表示后面 3 个格子都可以作为 起跳点
// 可以对每一个能作为 起跳点 的格子都尝试跳一次，把 能跳到最远的距离 不断更新
// 如果可以一直跳到最后，就成功了

var canJump = function(nums) {
  let reach = 0;
  for(let i = 0; i < nums.length; i++){
    if(i > reach) return false;
    reach = Math.max(reach, i + nums[i]);
  }
  return true;
};